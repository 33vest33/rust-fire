using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Newtonsoft.Json.Linq;
using System.Runtime.InteropServices.ComTypes;
using Newtonsoft.Json;
using Oxide.Core;
using Oxide.Core.Plugins;
using Oxide.Core.Libraries;
using Oxide.Game.Rust.Cui;
using Rust;
using Rust.Ai;
using UnityEngine;
using Color = UnityEngine.Color;
using System.Globalization;
using System.Runtime.InteropServices.WindowsRuntime;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using Apex;
using ConVar;







namespace Oxide.Plugins
{
    [Info("BannerSystem", "Hougan", "0.0.1")]
    public class BannerSystem : RustPlugin
    {
        //#region eNum

        private enum GiveAction
        {
            Default,
            Random,
            None,
            
            Give
        }

        //#endregion

        //#region Classes

        private class Banner
        {
            [JsonProperty("Ссылка на изображение баннера")]
            public string URL;
            [JsonProperty("Описание способа получения баннера")]
            public string Description;

            [JsonProperty("Действие для получение баннера")]
            public GiveAction ReasonAction;
            [JsonProperty("Количество дейтсвий для получения баннера")]
            public string Amount;
        }

        private class PlayerBanner
        {
            [JsonProperty("Текущий баннер")] 
            public string ActiveBanner;
            [JsonProperty("Доступные баннеры")] 
            public List<string> Banners = new List<string>();

            [JsonProperty("Последняя рулетка")] 
            public double NextRoulette;
        }
        
        [JsonProperty("Название слоя нового баннера")]
        private string LayerNew = "UI_NewBanner";
        [JsonProperty("Название слоя меню")]
        private string LayerMenu = "UI_MenuBanner";
        
        [JsonProperty("Список доступных для игроков баннеров")]
        private Dictionary<string, Banner> bannerDictionary = new Dictionary<string, Banner>();
        [JsonProperty("Список игроков и их баннеров")]
        private Dictionary<ulong, PlayerBanner> playerBanners = new Dictionary<ulong, PlayerBanner>();

        private List<ulong> OBTPlayer = new List<ulong>
        {
            76561198121100397,
            76561198082007259,
            76561198837659951,
            76561198827812174,
            76561198153183549,
            76561198279305517,
            76561198002899827,
            76561197988370053,
            76561198123609032,
            76561198108944453,
            76561198371684196,
            76561197966098765,
            76561198414003413,
            76561198813693750,
            76561198158853327,
            76561198346886879,
            76561197971653607,
            76561198175820849,
            76561198186846971,
            76561198124599068,
            76561198177836594,
            76561198055679039,
            76561198740893174,
            76561198213210633,
            76561198264585840,
            76561197963373732,
            76561198019051643,
            76561198421827123,
            76561198154922338,
            76561198119958103,
            76561198250939224,
            76561198319023318,
            76561198367977286,
            76561198074997112,
            76561198218063888,
            76561198101626204,
            76561198200133905,
            76561198375010759,
            76561198259936757,
            76561198274728927,
            76561198273536715,
            76561198355461470,
            76561198092121088,
            76561198324679586,
            76561198264020466,
            76561198283088547,
            76561198119287296,
            76561198402780407,
            76561198246456786,
            76561198106816973,
            76561198165365291,
            76561198436510646,
            76561198165286492,
            76561198178230350,
            76561198213020016,
            76561198256643750,
            76561198801348036,
            76561198170619926,
            76561198078607600,
            76561198812779142,
            76561198323881607,
            76561198380995068,
            76561198136155065,
            76561198264030350,
            76561198199619314,
            76561198160382968,
            76561198320043011,
            76561198326372348,
            76561198448086838,
            76561198826222505,
            76561198135356923,
            76561198140095838,
            76561198262919233,
            76561198248382030,
            76561198836469886,
            76561198334269926,
            76561198245939416,
            76561198136824177,
            76561198118495969,
            76561198173345922,
            76561198444358171,
            76561198184324829,
            76561198115317493,
            76561198311433956,
            76561198178163026,
            76561198021491316,
            76561198401708704,
            76561198345070934,
            76561198318393508,
            76561198061519881,
            76561198300995456,
            76561198843667290,
            76561198397847340,
            76561198124736805,
            76561198313009404,
            76561198339850225,
            76561198111480330,
            76561198820826904,
            76561198347172391,
            76561198182058739,
            76561198283398195,
            76561198364020751,
            76561198211234460,
            76561198096524709,
            76561198367329793,
            76561198217071052,
            76561198219425103,
            76561198358333899,
            76561198114300030,
            76561198305489161,
            76561198397305429,
            76561198025860895,
            76561198347932518,
            76561198380505872,
            76561198834972353,
            76561198444387300,
            76561198210442175,
            76561198230621400,
            76561198417667938,
            76561198315630873,
            76561198321360904,
            76561198280177476,
            76561198346148171,
            76561198411547006,
            76561198200891782,
            76561198035082313,
            76561198426076088,
            76561198424581961,
            76561198796049839,
            76561198191143054,
            76561198437273412,
            76561198838478911,
            76561198353241532,
            76561198358415472,
            76561198202237286,
            76561198132645498,
            76561198345989129,
            76561198433119730,
            76561198417408102,
            76561198396874647,
            76561198297813683,
            76561198324358128,
            76561198242791176,
            76561198238781346,
            76561198257049296,
            76561198381435137,
            76561198751474306,
            76561198430567760,
            76561198204840347,
            76561198362382699,
            76561198845208955,
            76561198346891001,
            76561198265183549,
            76561198279798181,
            76561198156732338,
            76561198161870343,
            76561198147576545,
            76561198299227335,
            76561198301459099,
            76561198188134541,
            76561198140901961,
            76561198276254519,
            76561198314194738,
            76561198841685484,
            76561198390582866,
            76561198052559646,
            76561198175758478,
            76561198171238665,
            76561198172837645,
            76561198326324929,
            76561198028322879,
            76561198081525423,
            76561198142389963,
            76561198347907153,
            76561198300467032,
            76561198166279491,
            76561198823281189,
            76561198189638487,
            76561198127045974,
            76561198006900877,
            76561198274422687,
            76561198199449281,
            76561198249516052,
            76561198173799358,
            76561198185928698,
            76561198153810408,
            76561198137153253,
            76561198057498424,
            76561198840594835,
            76561198258372186,
            76561198381646340,
            76561198376291295,
            76561198106728164,
            76561198254559433,
            76561198120133579,
            76561198347726233,
            76561198404740690,
            76561198271950466,
            76561198158059201,
            76561198133380326,
            76561198321115831,
            76561198197885306,
            76561198207992031,
            76561198180229425,
            76561198314710183,
            76561198443048940,
            76561198844763840,
            76561198837402198,
            76561198330203606,
            76561198085809613,
            76561198421676109,
            76561198838140280,
            76561198092940740,
            76561198241546342,
            76561197961364856,
            76561198283163931,
            76561198389983173,
            76561198439290245,
            76561198364581695,
            76561198144059437,
            76561198114020557,
            76561197997878530,
            76561198120807767,
            76561198194279550,
            76561198316231460,
            76561198203803157,
            76561198267879937,
            76561198231685212,
            76561198279494624,
            76561198412947596,
            76561198210808997,
            76561198383133119,
            76561198308451424,
            76561198309835619,
            76561198211386724,
            76561198404115744,
            76561198294471515,
            76561198336865132,
            76561198125151591,
            76561198160822307,
            76561198842989697,
            76561198195652423,
            76561198274478228,
            76561198190767562,
            76561198063202082,
            76561198371509554,
            76561198268888405,
            76561198267853948,
            76561198321152848,
            76561198243019216,
            76561198142268761,
            76561198300817610,
            76561198322189175,
            76561198840318349,
            76561198072608347,
            76561198043446081,
            76561198046358287,
            76561198804223696,
            76561198065170712,
            76561198829954384,
            76561198166986325,
            76561198399071382,
            76561198191148681,
            76561198232439340,
            76561198396108100,
            76561198226894672,
            76561198279601885,
            76561198026644279,
            76561198136250096,
            76561198834731460,
            76561198236355670,
            76561198444396662,
            76561198184683853,
            76561198372711246,
            76561198322876257,
            76561198038397298,
            76561198819034525,
            76561198138918612,
            76561198156885922,
            76561198166675060,
            76561198027443014,
            76561198198206830,
            76561198440275919,
            76561198329121322,
            76561198394823197,
            76561198189287906,
            76561198137668036,
            76561198837863146,
            76561198844268919,
            76561198377004331,
            76561198451878437,
            76561198106622348,
            76561198346480247,

        };

        //#endregion

        //#region Hooks

        private void OnPlayerDie(BasePlayer player, HitInfo info)
        {
            if (player.userID.IsSteamId() == false) return;
            try
            {
                if (info.damageTypes.GetMajorityDamageType() == DamageType.Suicide || info.damageTypes.GetMajorityDamageType() == DamageType.Generic || !(info?.Initiator is BasePlayer) || player.GetComponent<NPCPlayer>() != null || info.InitiatorPlayer.GetComponent<NPCPlayer>() != null)
                    return;
            
                if (player.userID == 76561198115317493)
                    GiveBanner(info.InitiatorPlayer.userID, "ban.streamsniper");
            
                DrawGUI(player, info.InitiatorPlayer, info?.Weapon?.GetItem().info.displayName.english, Math.Round(Vector3.Distance(player.transform.position, info.InitiatorPlayer.transform.position)).ToString());

            }
            catch(NullReferenceException)
            {}
        }
        
        private void OnPlayerRespawn(BasePlayer player) => CuiHelper.DestroyUi(player, LayerNew);
        private void OnPlayerRespawned(BasePlayer player) => CuiHelper.DestroyUi(player, LayerNew);

        private IEnumerator LoadImages(string name, string url)
        {
            yield return ImageLibrary.Call("AddImage", url);
        }
        

        private void OnServerInitialized()
        {		
			if (!Interface.Oxide.DataFileSystem.ExistsDatafile("Banners/PlayerList"))
            {
                Interface.Oxide.DataFileSystem.WriteObject("Banners/PlayerList", playerBanners);
            }
			
			if (!Interface.Oxide.DataFileSystem.ExistsDatafile("Banners/BannerList"))
            {
                Interface.Oxide.DataFileSystem.WriteObject("Banners/BannerList", bannerDictionary);
            }
			

            foreach (var check in bannerDictionary)
			{
				ImageLibrary.Call("AddImage", check.Value.URL, check.Key);
			}
            foreach (var check in bannerDictionary.Where(p => p.Value.ReasonAction == GiveAction.Give && !p.Value.Amount.Contains("null")))
			{
                permission.RegisterPermission(check.Value.Amount, this);
            }
            TryGetBanners();
            int newBanners = bannerDictionary.Count(p => p.Value.ReasonAction == GiveAction.None);
            
            if (newBanners > 0)
            {
                PrintError($"Необходимо настроить {newBanners} баннеров.");
            }
            
            BasePlayer.activePlayerList.ForEach(OnPlayerInit);
            MakeRoulette();
        }
	
		
		
        private void OnPlayerInit(BasePlayer player)
        {
            if (!playerBanners.ContainsKey(player.userID))
            {
                PlayerBanner playerBanner = new PlayerBanner();
                playerBanner.Banners = bannerDictionary.Where(p => p.Value.ReasonAction == GiveAction.Default)
                    .Select(p => p.Key)
                    .ToList();
                playerBanner.ActiveBanner = playerBanner.Banners.GetRandom();
                playerBanner.NextRoulette = GetTimeStamp();
                playerBanners.Add(player.userID, playerBanner);
            }
        }
		private static DateTime Epoch = new DateTime(1970, 1, 1);
		public static long GetTimeStamp()
		{
			return (long)DateTime.Now.Subtract(Epoch).TotalSeconds;
		}
		
		public static string FormatTime(TimeSpan time)
        {
            string result = string.Empty;
            if (time.Days != 0)
                result += $"{Format(time.Days, "дней", "дня", "день")} ";

            if (time.Hours != 0)
                result += $"{Format(time.Hours, "часов", "часа", "час")} ";

            if (time.Minutes != 0)
                result += $"{Format(time.Minutes, "минут", "минуты", "минута")} ";

            if (time.Seconds != 0)
                result += $"{Format(time.Seconds, "секунд", "секунды", "секунда")} ";
			
            return result;
        }
		 private static string Format(int units, string form1, string form2, string form3)
        {
            var tmp = units % 10;

            if (units >= 5 && units <= 20 || tmp >= 5 && tmp <= 9)
                return $"{units} {form1}";

            if (tmp >= 2 && tmp <= 4)
                return $"{units} {form2}";

            return $"{units} {form3}";
        }
        //#region Functions

        private void MakeRoulette()
        {
            foreach (var check in BasePlayer.activePlayerList)
            {
                if (playerBanners[check.userID].NextRoulette - GetTimeStamp() < 0)
                    SendReply(check, "Откройте меню выбора баннера чтобы получить случайный баннер. Команда: <color=#81b67a>/banner</color>");
            }
            timer.Once(300, MakeRoulette);
        }

        private void GiveBanner(ulong playerId, string name)
        {
            if (playerBanners[playerId].Banners.Contains(name))
                return;
            
            playerBanners[playerId].Banners.Add(name);
            
            BasePlayer player = BasePlayer.FindByID(playerId);
            if (player != null && player.IsConnected)
                DrawNewBanner(player, name);
        }

        private void TakeBanner(ulong playerId, string name)
        {
            if (playerBanners[playerId].Banners.Contains(name))
                playerBanners[playerId].Banners.Remove(name);
            else
            {
                return;
            }

            if (playerBanners[playerId].ActiveBanner == name)
                playerBanners[playerId].ActiveBanner = playerBanners[playerId].Banners.GetRandom();
            
            BasePlayer player = BasePlayer.FindByID(playerId);
            if (player != null && player.IsConnected)
                SendReply(player, "У вас забрали один из ваших баннеров, возможно, у вас кончилась привилегия!");
        }

        //#endregion

        //#region Commands

        [ChatCommand("banner")]
        private void cmdChatBanner(BasePlayer player)
        {
            foreach (var check in bannerDictionary.Where(p => p.Value.ReasonAction == GiveAction.Give && !p.Value.Amount.Contains("null")))
            {
                if (permission.UserHasPermission(player.UserIDString,check.Value.Amount))
                    GiveBanner(player.userID, check.Key);
                else 
                    TakeBanner(player.userID, check.Key);
            }
            if (OBTPlayer.Contains(player.userID))
                GiveBanner(player.userID, "ban.obt");
            
            int cooldown = (int) (playerBanners[player.userID].NextRoulette - GetTimeStamp());
            if (cooldown > 0)
            {
                SendReply(player, $"Вы сможете получить случайный баннер через: <color=#81B67A>{TimeSpan.FromSeconds(cooldown)}</color>");
            }
            else
            {
                GiveBanner(player.userID, bannerDictionary
                    .Where(p => p.Value.ReasonAction == GiveAction.Random)
                    .ToList()
                    .GetRandom().Key);
                playerBanners[player.userID].NextRoulette = GetTimeStamp() + 86400;
            }
            
            ChooseBanner(player);
        }

        [ConsoleCommand("givealllol")]
        private void cmdTest(ConsoleSystem.Arg args)
        {
            foreach (var check in bannerDictionary)
            {
                GiveBanner(args.Player().userID, check.Key);
            }
        }

        [ConsoleCommand("UI_ChooseBanner")]
        private void consoleChooseBanner(ConsoleSystem.Arg arg)
        {
            BasePlayer player = arg.Player();
            if (player == null)
            {
                PrintWarning("Вы используете команду через консоль!");
                return;
            }

            string[] args = arg.Args;

            if (args.Length == 0)
                return;
            
            if (args[0].ToLower() == "change")
            {
                ChooseBanner(player, Math.Min(Convert.ToInt32(args[1]), playerBanners[player.userID].Banners.Count - 1));
            }
            if (args[0].ToLower() == "set")
            {
                playerBanners[player.userID].ActiveBanner = playerBanners[player.userID].Banners[Convert.ToInt32(args[1])];
                ChooseBanner(player);
            }
        }
        
        [ConsoleCommand("banner")]
        private void cmdConsole(ConsoleSystem.Arg args)
        {
            if (args.Player() != null)
                return;

            if (args.Args.Length != 3)
                return;

            string action = args.Args[0].ToLower();
            string who = args.Args[1];
            string banner = args.Args[2];
            
            switch (action)
            {
                case "add":
                {
                    if (who == "all")
                    {
                        BasePlayer.activePlayerList.ForEach(p => GiveBanner(p.userID, banner));
                        PrintWarning($"Всем был выдан баннер: {banner}");
                    }
                    else
                    {
                        GiveBanner(ulong.Parse(who), banner);
                        PrintWarning($"Игроку {who} выдан баннер: {banner}");
                    }
                    break;
                }
                case "remove":
                {
                    if (who == "all")
                    {
                        BasePlayer.activePlayerList.ForEach(p => TakeBanner(p.userID, banner));
                        PrintWarning($"У всех забрали баннер: {banner}");
                    }
                    else
                    {
                        TakeBanner(ulong.Parse(who), banner);
                        PrintWarning($"У игрока {who} забрали баннер: {banner}");
                    }
                    break;
                }
                default:
                {
                    PrintError("Неизвестное действие!");
                    return;
                }
            }
        }
        

        //#endregion

        //#region GUI

        [PluginReference] private Plugin ImageLibrary;
        private void ChooseBanner(BasePlayer player, int index = -1)
        {
            CuiElementContainer container = new CuiElementContainer();
            PlayerBanner playerBanner = this.playerBanners[player.userID];
            
            if (index == -1)
            {
                index = playerBanner.Banners.IndexOf(playerBanner.ActiveBanner);
                
                CuiHelper.DestroyUi(player, LayerMenu);

                container.Add(new CuiPanel
                {
                    /* Главная панель */
                    CursorEnabled = true,
                    RectTransform = { AnchorMin = "0.2916667 0.3148148", AnchorMax = "0.2916667 0.3148148", OffsetMax = "533 266"},
                    Image = { Color = "0 0 0 0", Sprite = "assets/content/ui/ui.background.tile.psd" }
                }, "Hud", LayerMenu);

                container.Add(new CuiButton
                {
                    RectTransform = {AnchorMin = "-100 -100", AnchorMax = "100 100"},
                    Button = {Color = "0 0 0 0", Close = LayerMenu},
                    Text = {Text = ""}
                }, LayerMenu);

                container.Add(new CuiElement
                {
                    Parent = LayerMenu,
                    Components =
                    {
                        new CuiRawImageComponent {Color = "#58585861", Sprite = "assets/content/ui/ui.background.tile.psd"},
                        new CuiRectTransformComponent {AnchorMin = "0 0.20", AnchorMax = "1 1"}
                    }
                });
    
                container.Add(new CuiElement
                {
                    Parent = LayerMenu,
                    Name = LayerMenu + ".Header",
                    Components =
                    {
                        new CuiRawImageComponent { Color = "#81B67BFF", Sprite = "assets/content/ui/ui.background.tile.psd"},
                        new CuiRectTransformComponent { AnchorMin = "0 0.8426808", AnchorMax = "1 1.012894" },
                        //new CuiOutlineComponent { Color = "#6B6B6BFF", Distance = "0 2" }
                    }
                });
                
                container.Add(new CuiElement
                {
                    Parent = LayerMenu + ".Header",
                    Components =
                    {
                        new CuiTextComponent { Text = "<size=26>ПАНЕЛЬ УПРАВЛЕНИЯ БАННЕРОМ</size>", Color = "#3B5738FF", Font = "robotocondensed-bold.ttf", Align = TextAnchor.MiddleCenter},
                        new CuiRectTransformComponent { AnchorMin = "0 0.3", AnchorMax = "1 1" },
                        new CuiOutlineComponent { Color = "#3B5738FF", Distance = "0.155 0.155" }
                    }
                });
                
                container.Add(new CuiElement
                {
                    Parent = LayerMenu + ".Header",
                    Components =
                    {
                        new CuiTextComponent { Text = $"Статистика открытых баннеров: {playerBanner.Banners.Count} из {bannerDictionary.Count} доступных!", FontSize = 14, Color = "#3B5738f1", Font = "robotocondensed-regular.ttf", Align = TextAnchor.MiddleCenter },
                        new CuiRectTransformComponent { AnchorMin = "0.03181809 0.0", AnchorMax = "0.9681819 0.47" },
                    }
                });
                
                container.Add(new CuiElement
                {
                    Parent = LayerMenu,
                    Name = LayerMenu + ".Banner",
                    Components =
                    {
                        new CuiImageComponent { Color = /*"#A4A4A4FF"*/ "0 0 0 0" },
                        new CuiRectTransformComponent { AnchorMin = "0.01777265 0.3387191", AnchorMax = "0.9777274 0.823827" },
                    }
                });
            }

            double width = (float) 1 / playerBanner.Banners.Count;
            CuiHelper.DestroyUi(player, LayerMenu + ".Position");
            
            container.Add(new CuiElement
            {
                Parent = LayerMenu,
                Name = LayerMenu + ".Position",
                Components =
                {
                    new CuiRawImageComponent { Color = "#D6D6D6FF", Sprite = "assets/content/ui/ui.background.tile.psd" },
                    new CuiRectTransformComponent { AnchorMin = $"{Math.Max(0, width * index)} 0.20", AnchorMax = $"{Math.Min(1, width * (index + 1))} 0.205" },
                }
            });

            CuiHelper.DestroyUi(player, LayerMenu + ".Banner.Sized");
            
            container.Add(new CuiElement
            {
                FadeOut = 0.3f,
                Parent = LayerMenu + ".Banner",
                Name = LayerMenu + ".Banner.Sized",
                Components =
                {
                    new CuiRawImageComponent { FadeIn = 0.3f, Png = (string) ImageLibrary.Call("GetImage", playerBanner.Banners[index]), Sprite = "assets/content/ui/ui.background.tile.psd" },
                    new CuiRectTransformComponent { AnchorMin = "0.004405677 0.01754272", AnchorMax = "0.9955943 0.9824579" }
                }
            });

            container.Add(new CuiElement
            {
                /* Отрисовываем аватарку пользователя */
                Parent = LayerMenu + ".Banner.Sized",
                Components =
                {
                    new CuiRawImageComponent { Png = (string) ImageLibrary.Call("GetImage", player.UserIDString), Sprite = "assets/content/ui/ui.background.tile.psd" },
                    new CuiRectTransformComponent { AnchorMin = "0.01119532 0.05", AnchorMax = "0.223925 0.95" },
                    new CuiOutlineComponent { Distance = "2 2", Color = "#979797FF" }
                }
            });

            container.Add(new CuiElement
            {
                /* Отрисовываем ранг пользователя */
                Parent = LayerMenu + ".Banner.Sized",
                Components =
                {
                    new CuiTextComponent { Text = player.displayName, FontSize = 45, Align = TextAnchor.MiddleLeft, Font = "robotocondensed-bold.ttf" },
                    new CuiRectTransformComponent { AnchorMin = "0.2527497 0.3888876", AnchorMax = "0.9911312 0.8240748" },
                    new CuiOutlineComponent { Distance = "1 1", Color = "#343434FF" }
                }
            });

            container.Add(new CuiElement
            {
                /* Отрисовываем ранг пользователя */
                Parent = LayerMenu + ".Banner.Sized",
                Components =
                {
                    new CuiTextComponent { Text = player.displayName, FontSize = 24, Align = TextAnchor.MiddleLeft, Font = "robotocondensed-regular.ttf" },
                    new CuiRectTransformComponent { AnchorMin = "0.2560357 0.1287543", AnchorMax = "1 0.425052" },
                    new CuiOutlineComponent { Distance = "0.155 0.155", Color = "#343434FF" }
                }
            });

            CuiHelper.DestroyUi(player, LayerMenu + ".Banner.Left");
            CuiHelper.DestroyUi(player, LayerMenu + ".Banner.Middle");
            CuiHelper.DestroyUi(player, LayerMenu + ".Banner.Right");
            
            // Начинаем отрисовывать ебучие кнопки

            if (index - 1 >= 0)
            {
                container.Add(new CuiElement
                {
                    Parent = LayerMenu,
                    Name = LayerMenu + ".Banner.Left",
                    Components =
                    {
                        new CuiRawImageComponent { Color = "#D6D6D6FF", Sprite = "assets/content/ui/ui.background.tile.psd" },
                        new CuiRectTransformComponent { AnchorMin = "0.3281818 0.225", AnchorMax = "0.3700000 0.324" },
                        new CuiOutlineComponent { Distance = "0 2", Color = "#565656FF" }
                    }
                });

                container.Add(new CuiElement
                {
                    Parent = LayerMenu + ".Banner.Left",
                    Components =
                    {
                        new CuiTextComponent { Text = "<", FontSize = 20, Color = "#373737FF", Font = "robotocondensed-bold.ttf", Align = TextAnchor.MiddleCenter},
                        new CuiRectTransformComponent { AnchorMin = "0 0", AnchorMax = "1 1" },
                    }
                });
            
                container.Add(new CuiButton
                {
                    Button = { Color = "0 0 0 0", Command = $"UI_ChooseBanner change {index-1}" },
                    RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                    Text = { Text = "" }
                }, LayerMenu + ".Banner.Left");
            }
            
            // Начинаем отрисовывать ебучие кнопки

            container.Add(new CuiElement
            {
                Parent = LayerMenu,
                Name = LayerMenu + ".Banner.Middle",
                Components =
                {
                    new CuiRawImageComponent { Color = "#D6D6D6FF", Sprite = "assets/content/ui/ui.background.tile.psd" },
                    new CuiRectTransformComponent { AnchorMin = "0.3754545 0.225", AnchorMax = "0.6245455 0.324" },
                    new CuiOutlineComponent { Distance = "0 2", Color = "#565656FF" }
                }
            });

            string text = index == playerBanner.Banners.IndexOf(playerBanner.ActiveBanner) ? "ТЕКУЩИЙ" : "ВЫБРАТЬ";
            string command = text == "ВЫБРАТЬ" ? $"UI_ChooseBanner set {index}" : "";
            container.Add(new CuiElement
            {
                FadeOut = 0.4f,
                Parent = LayerMenu + ".Banner.Middle",
                Components =
                {
                    new CuiTextComponent { FadeIn = 0.4f, Text = text, FontSize = 20,  Color = "#373737FF", Font = "robotocondensed-bold.ttf", Align = TextAnchor.MiddleCenter },
                    new CuiRectTransformComponent { AnchorMin = "0 0", AnchorMax = "1 1" },
                }
            });
            
            container.Add(new CuiButton
            {
                Button = { Color = "0 0 0 0", Command = command },
                RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                Text = { Text = "" }
            }, LayerMenu + ".Banner.Middle");
            
            // Начинаем отрисовывать ебучие кнопки
            
            if (index + 2 <= playerBanner.Banners.Count)
            {
                container.Add(new CuiElement
                {
                    Parent = LayerMenu,
                    Name = LayerMenu + ".Banner.Right",
                    Components =
                    {
                        new CuiRawImageComponent { Color = "#D6D6D6FF", Sprite = "assets/content/ui/ui.background.tile.psd" },
                        new CuiRectTransformComponent { AnchorMin = "0.6299996 0.225", AnchorMax = "0.671818 0.324" },
                        new CuiOutlineComponent { Distance = "0 2", Color = "#565656FF" }
                    }
                });

                container.Add(new CuiElement
                {
                    Parent = LayerMenu + ".Banner.Right",
                    Components =
                    {
                        new CuiTextComponent { Text = $">", FontSize = 20,  Color = "#373737FF", Font = "robotocondensed-bold.ttf", Align = TextAnchor.MiddleCenter },
                        new CuiRectTransformComponent { AnchorMin = "0 0", AnchorMax = "1 1" },
                    }
                });
            
                container.Add(new CuiButton
                {
                    Button = { Color = "0 0 0 0", Command = $"UI_ChooseBanner change {index+1}" },
                    RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
                    Text = { Text = "" }
                }, LayerMenu + ".Banner.Right");
            }
            

            CuiHelper.AddUi(player, container);
        }
        
        private void DrawGUI(BasePlayer target, BasePlayer player, string weapon, string distance)
        {
            CuiHelper.DestroyUi(target, LayerNew);
            
            CuiElementContainer container = new CuiElementContainer();

            container.Add(new CuiPanel
            {
                /* Главная панель */
                CursorEnabled = false,
                RectTransform = { AnchorMin = "0.004165918 0.7861201", AnchorMax = "0.004165918 0.7861201", OffsetMax = "613 150" },
                Image = { Color = "0 0 0 0" }
            }, "Overlay", LayerNew);

            container.Add(new CuiElement
            {
                /* Задний план */
                Parent = LayerNew,
                Name = LayerNew + ".Banner.Sized",
                Components =
                {
                    new CuiRawImageComponent { FadeIn = 5f, Png = (string) ImageLibrary.Call("GetImage", playerBanners[player.userID].ActiveBanner)},
                    new CuiRectTransformComponent { AnchorMin = "0 0", AnchorMax = "1 1" }
                }
            });
            container.Add(new CuiElement
            {
                /* Отрисовываем аватарку пользователя */
                Parent = LayerNew + ".Banner.Sized",
                Components =
                {
                    new CuiRawImageComponent { FadeIn = 5f, Png = (string) ImageLibrary.Call("GetImage", player.UserIDString) },
                    new CuiRectTransformComponent { AnchorMin = "0.01119532 0.03703609", AnchorMax = "0.223925 0.9429639" },
                    new CuiOutlineComponent { Distance = "2 2", Color = "#979797FF" }
                }
            });

            container.Add(new CuiElement
            {
                /* Отрисовываем ранг пользователя */
                Parent = LayerNew + ".Banner.Sized",
                Components =
                {
                    new CuiTextComponent { FadeIn = 5f, Text = player.displayName, FontSize = 45, Align = TextAnchor.MiddleLeft, Font = "robotocondensed-bold.ttf" },
                    new CuiRectTransformComponent { AnchorMin = "0.2527497 0.3888876", AnchorMax = "0.9911312 0.8240748" },
                    new CuiOutlineComponent { Distance = "1 1", Color = "#343434FF" }
                }
            });

            container.Add(new CuiElement
            {
                /* Отрисовываем ранг пользователя */
                Parent = LayerNew + ".Banner.Sized",
                Components =
                {
                    new CuiTextComponent { FadeIn = 5f, Text = player.displayName, FontSize = 24, Align = TextAnchor.MiddleLeft, Font = "robotocondensed-regular.ttf" },
                    new CuiRectTransformComponent { AnchorMin = "0.2560357 0.1287543", AnchorMax = "1 0.425052" },
                    new CuiOutlineComponent { Distance = "0.155 0.155", Color = "#343434FF" }
                }
            });

            container.Add(new CuiElement
            {
                /* Отрисовываем ранг пользователя */
                Parent = LayerNew + ".Banner.Sized",
                Components =
                {
                    new CuiTextComponent { FadeIn = 5f, Text = $"ВЫ БЫЛИ УБИТЫ ЭТИМ ИГРОКОМ ИЗ ОРУЖИЯ {weapon.ToUpper()} ({distance} М.)", FontSize = 18, Align = TextAnchor.UpperCenter, Font = "robotocondensed-regular.ttf" },
                    new CuiRectTransformComponent { AnchorMin = "0 -0.5", AnchorMax = "1 -0.05" },
                    //new CuiOutlineComponent { Distance = "0.155 0.155", Color = "#343434FF" }
                }
            });

            CuiHelper.AddUi(target, container);
        }

        private void DrawNewBanner(BasePlayer player, string name)
        {
			LoadDefaultConfig();
            if (!ImageLibrary)
            {
                PrintError("Не обнаружен плагин ImageLibrary - плагин работать не будет");
                PrintError("Не обнаружен плагин ImageLibrary - плагин работать не будет");
                PrintError("Не обнаружен плагин ImageLibrary - плагин работать не будет");
            }
            CuiHelper.DestroyUi(player, LayerNew);
            
            CuiElementContainer container = new CuiElementContainer();

            container.Add(new CuiPanel
            {
                CursorEnabled = false,
                RectTransform = { AnchorMin = "0.3822916 0.8416625", AnchorMax = "0.6166667 0.9824033" },
                Image = { Color = "0 0 0 0" }
            }, "Hud", LayerNew);

    
            container.Add(new CuiElement
            {
                FadeOut = 1f,
                Parent = LayerNew,
                Name = LayerNew + ".Header",
                Components =
                {
                    new CuiImageComponent { Color = "#81B67AFF" },
                    new CuiRectTransformComponent { AnchorMin = "0 0.7226816", AnchorMax = "0.996 1.001001" }
                }
            });
                

            container.Add(new CuiElement
            {
                FadeOut = 1f,
                Parent = LayerNew + ".Header",
                Name = LayerNew + ".Header.Text",
                Components =
                {
                    new CuiTextComponent { Text = "<size=18>ДОСТУПЕН НОВЫЙ БАННЕР</size>", Color = "#373737FF", Font = "robotocondensed-bold.ttf", Align = TextAnchor.MiddleCenter},
                    new CuiRectTransformComponent { AnchorMin = "0 0", AnchorMax = "1 1" },
                    new CuiOutlineComponent { Color = "#373737FF", Distance = "0.155 0.155" }
                }
            });
            

            container.Add(new CuiElement
            {
                FadeOut = 1f,
                Parent = LayerNew,
                Name = LayerNew + ".Png",
                Components =
                {
                    new CuiRawImageComponent { FadeIn = 1f, Png = (string) ImageLibrary.Call("GetImage", name) },
                    new CuiRectTransformComponent { AnchorMin = "0 0", AnchorMax = "0.9955943 0.7038949" }
                }
            });

            CuiHelper.AddUi(player, container);

            timer.Once(5, () =>
            {
                CuiHelper.DestroyUi(player, LayerNew + ".Header");
                CuiHelper.DestroyUi(player, LayerNew + ".Header.Text");
                CuiHelper.DestroyUi(player, LayerNew + ".Png");
            });
            timer.Once(7, () => CuiHelper.DestroyUi(player, LayerNew));
        }

        //#endregion

        //#region Utils

        private void TryGetBanners()
        {
            PrintWarning("Поиск новых баннеров:");
            
            int i = 0;
            string[] findFiles = Interface.Oxide.DataFileSystem.GetFiles("Banners/Banners");
            foreach (var check in findFiles)
            {
                string fullName = check.Split('\\')[check.Split('\\').Count() - 1].Replace(".png", "");
                string normalName = fullName.Split('+')[0];
                string urlName = fullName.Split('+')[1];
                if (!bannerDictionary.ContainsKey("ban." + normalName))
                {
                    bannerDictionary.Add("ban." + normalName, new Banner
                    {
                        ReasonAction = GiveAction.None,
                        Amount = "null",
                        
                        Description = "Баннер был только что добавлен, поэтому к нему ещё нету описания",
                        URL = "https://i.imgur.com/" + urlName + ".png"
                    }); 
                    i++;
                    
                    PrintWarning($"[{i}] Добавлено: ban.{normalName}");  
                }
            }
        }

        //#endregion
    }
}